import { expect } from 'chai';
import { Settings } from '../src/accounts';
import 'mocha';
import * as borsh from 'borsh';
import { PublicKey } from '@solana/web3.js';
import BN from 'bn.js';
import { BASE_REWARD, Community } from '../src';

describe('Settings', () => {
    const raw = Buffer.from([
        0x05, 0xe5, 0xeb, 0x3d, 0x36, 0x5f, 0xbf, 0x21, 0x53, 0xee, 0xf0, 0xfc,
        0xcb, 0x32, 0x3a, 0x67, 0xf6, 0x47, 0xfa, 0xc4, 0xbe, 0x88, 0xfd, 0x5e,
        0x6c, 0x2f, 0x7a, 0xdf, 0xf6, 0xe0, 0x97, 0x1c, 0x3c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xbf, 0x05, 0xc0, 0x62, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x28, 0x2e, 0x8c, 0xd1, 0x00, 0x00, 0x00, 0x0e, 0x6a, 0x0e, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x38, 0xf1, 0x5b, 0x1b, 0x10, 0xdd, 0xa8, 0x66,
        0xf8, 0xdc, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0xd3, 0xde, 0x60,
        0x00, 0x00, 0x00, 0x00
    ]);

    const settings: Settings = borsh.deserialize(
        Settings.schema,
        Settings,
        raw
    );
    it('should be equal', () => {
        expect(settings.token).to.eql(
            new PublicKey('Q2P36HbwEBwxTSj8QhiMscbA21vBi7edJKbsb9KjBRM')
        );

        expect(settings.unbondingTime.eqn(60)).to.be.true;
        expect(settings.nextEmissionChange).to.eql(
            new Date('2022-07-02 08:45:51.000+00')
        );

        expect(settings.emission.eq(BASE_REWARD)).to.be.true;
        expect(settings.totalStake.eqn(944654)).to.be.true;
        expect(settings.rewardPerShare.eq(new BN('9505983553469455343022392')))
            .to.be.true;
        expect(settings.lastReward).to.eql(
            new Date('2021-07-02 08:52:52.000+00')
        );
    });

    it('should calculate', () => {
        expect(
            // one day
            settings
                .calculateRewardPerShare(new Date('2021-07-03 08:45:51.000+00'))
                .eq(new BN('2607005792451633063128294278'))
        ).to.be.true;
        expect(
            // one year
            settings
                .calculateRewardPerShare(new Date('2022-07-02 08:45:51.000+00'))
                .eq(new BN('952726569754857408885174220678'))
        ).to.be.true;
        expect(
            // one year one month
            settings
                .calculateRewardPerShare(new Date('2022-08-02 08:45:51.000+00'))
                .eq(new BN('1013414151793664920665017779078'))
        ).to.be.true;
    });
});

describe('Community', () => {
    const raw = Buffer.from([
        0x90, 0xd2, 0xde, 0x60, 0x00, 0x00, 0x00, 0x00, 0x39, 0xfb, 0xed, 0x3a,
        0xd4, 0x64, 0xea, 0x49, 0x18, 0xf3, 0x47, 0xad, 0x8f, 0xfb, 0xdb, 0x15,
        0x4a, 0x31, 0xc7, 0xd4, 0x0f, 0x4e, 0x2c, 0x50, 0xcb, 0xa0, 0xc7, 0xd1,
        0x11, 0xbf, 0x22, 0x52, 0xff, 0x88, 0xe4, 0x69, 0x65, 0xf5, 0xb2, 0x0e,
        0xf9, 0xda, 0x95, 0x6f, 0xc0, 0x68, 0x05, 0x7d, 0xb9, 0x48, 0x25, 0x00,
        0x7b, 0xb7, 0x49, 0xcd, 0xa9, 0x60, 0x92, 0xf6, 0x3d, 0xe3, 0x8b, 0xfc,
        0x86, 0x7c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xa8, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x6b, 0x65, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x30, 0x4f, 0x6b, 0x5f, 0xed, 0xe3, 0x8c, 0x14, 0xbc, 0x89, 0x9b, 0xda,
        0xb7, 0x0a, 0xd5, 0x3a, 0xe9, 0x38, 0xec, 0x28, 0x8f, 0xdd, 0xc2, 0xed,
        0xf7, 0xfb, 0xb4, 0x3f, 0x97, 0x96, 0x1a, 0x43, 0x01, 0x71, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xbe, 0xb3, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x18, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    const community: Community = borsh.deserialize(
        Community.schema,
        Community,
        raw
    );

    it('should be equal', () => {
        expect(community.creationDate).to.be.eql(
            new Date('2021-07-02 08:47:12.000+00')
        );

        expect(community.authority).to.be.eql(
            new PublicKey('4uM3Z2mw5hvbKe3VVceAKFK1DSereFaYBh7Xa43DoFbw')
        );

        expect(community.primary.isEmpty()).to.be.false;
        expect(community.primary.authority).to.be.eql(
            new PublicKey('JCW2ofkJktvnqQYXuhfJCRgYVnrJAeeqdnyUVixaSB5M')
        );
        expect(community.primary.staked.eqn(425094)).to.be.true;
        expect(community.primary.rewardDebt.eqn(4040936)).to.be.true;
        expect(community.primary.pendingReward.eqn(3827051)).to.be.true;

        expect(community.secondary.isEmpty()).to.be.false;
        expect(community.secondary.authority).to.be.eql(
            new PublicKey('4FaotbbKMnmKzNKv4K6V2B2tLpa3yv9ASSUmfpZrdqYE')
        );
        expect(community.secondary.staked.eqn(94465)).to.be.true;
        expect(community.secondary.rewardDebt.eqn(897982)).to.be.true;
        expect(community.secondary.pendingReward.eqn(333902)).to.be.true;
    });
});

describe('Community without secondary', () => {
    const raw = Buffer.from([
        0x66, 0xec, 0xde, 0x60, 0x00, 0x00, 0x00, 0x00, 0x45, 0x8e, 0x52, 0xea,
        0x26, 0x4f, 0xc8, 0xa3, 0x72, 0xbe, 0xbf, 0x7d, 0x4f, 0xae, 0xbd, 0x33,
        0x6b, 0x8d, 0x88, 0xa9, 0x40, 0x4d, 0x59, 0xa0, 0x60, 0x84, 0xd8, 0xd9,
        0x2f, 0x7d, 0x33, 0x4c, 0xcf, 0x60, 0x6e, 0x82, 0xd1, 0x04, 0x9f, 0xf3,
        0x86, 0xd5, 0x06, 0x0c, 0xa6, 0xd4, 0x50, 0x8e, 0x01, 0x6b, 0x1a, 0x97,
        0x99, 0x4f, 0xfb, 0x65, 0xb0, 0x0a, 0xab, 0xf6, 0xa0, 0x8e, 0x51, 0xc7,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    const community: Community = borsh.deserialize(
        Community.schema,
        Community,
        raw
    );

    it('should be equal', () => {
        expect(community.secondary.isEmpty()).to.be.true;
        expect(community.secondary.authority).to.be.eql(
            new PublicKey('11111111111111111111111111111111')
        );
    });
});
